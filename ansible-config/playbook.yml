---
- name: Configure Node.js Chat Application Server
  hosts: chat_servers
  become: yes
  vars:
    app_dir: /opt/chat-app
    app_user: nodejs
    
  tasks:
    - name: Install Python 3.8 from Amazon Linux Extras
      shell: |
        amazon-linux-extras install python3.8 -y
        alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 1
      become: yes
      ignore_errors: yes

    - name: Update system packages
      shell: yum update -y
      become: yes

    - name: Install EPEL repository
      shell: amazon-linux-extras install epel -y
      become: yes

    - name: Install required packages using shell
      shell: yum install -y curl wget git firewalld nginx
      become: yes

    - name: Install Node.js using NVM (avoiding package conflicts)
      shell: |
        curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash
        export NVM_DIR="$HOME/.nvm"
        [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
        nvm install 16
        nvm use 16
        nvm alias default 16
        npm install -g pm2
      become: yes
      become_user: ec2-user

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        shell: /bin/bash
        home: /home/{{ app_user }}
        create_home: yes

    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'

    - name: Configure Nginx for chat app
      copy:
        content: |
          server {
              listen 80;
              server_name _;
              
              location / {
                  proxy_pass http://localhost:3000;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection 'upgrade';
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
                  proxy_cache_bypass $http_upgrade;
              }
          }
        dest: /etc/nginx/conf.d/chat-app.conf
        mode: '0644'
      notify: restart nginx

    - name: Create Nginx main config
      copy:
        content: |
          user nginx;
          worker_processes auto;
          error_log /var/log/nginx/error.log;
          pid /run/nginx.pid;

          events {
              worker_connections 1024;
          }

          http {
              log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                                '$status $body_bytes_sent "$http_referer" '
                                '"$http_user_agent" "$http_x_forwarded_for"';

              access_log  /var/log/nginx/access.log  main;
              sendfile            on;
              tcp_nopush          on;
              tcp_nodelay         on;
              keepalive_timeout   65;
              types_hash_max_size 2048;
              include             /etc/nginx/mime.types;
              default_type        application/octet-stream;
              include /etc/nginx/conf.d/*.conf;
          }
        dest: /etc/nginx/nginx.conf
        mode: '0644'
      notify: restart nginx

    - name: Start and enable services
      systemd:
        name: "{{ item }}"
        state: started
        enabled: yes
      loop:
        - nginx
        - firewalld

    - name: Open firewall ports using shell commands
      shell: |
        firewall-cmd --permanent --add-service=http
        firewall-cmd --permanent --add-service=https
        firewall-cmd --reload
      become: yes

    - name: Verify firewall configuration
      shell: firewall-cmd --list-services
      register: firewall_services
      become: yes

    - name: Display firewall services
      debug:
        msg: "Active firewall services: {{ firewall_services.stdout }}"

    - name: Create PM2 ecosystem file
      copy:
        content: |
          module.exports = {
            apps: [{
              name: 'chat-app',
              script: 'app.js',
              cwd: '{{ app_dir }}',
              instances: 1,
              exec_mode: 'fork',
              env: {
                NODE_ENV: 'production',
                PORT: 3000
              }
            }]
          };
        dest: "{{ app_dir }}/ecosystem.config.js"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'

    - name: Display completion message
      debug:
        msg: "Server configuration completed successfully with working firewall!"

  handlers:
    - name: restart nginx
      systemd:
        name: nginx
        state: restarted
